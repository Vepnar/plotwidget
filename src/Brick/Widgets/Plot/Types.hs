module Brick.Widgets.Plot.Types where

import qualified Graphics.Vty as VT
import qualified Data.Vector as V
import qualified Data.Semigroup as Sem

type Point = (Double,Double)

data Pixel 
    = Colored { color :: VT.Color, char :: Char } 
    | Natural { char :: Char } 
    | Empty
    deriving (Eq)

instance Sem.Semigroup Pixel where
    Colored c1 c2 <> _ = Colored c1 c2
    Natural c <> _ = Natural c
    Empty <> x = x

instance Monoid Pixel where
    mempty = Empty
    mappend = (Sem.<>)

instance Show Pixel where
    show (Colored _ c) = [c]
    show (Natural c) = [c]
    show Empty = " "

data Dimensions = Dims
  { xMin :: Double
  , xMax :: Double
  , yMin :: Double
  , yMax :: Double
  } deriving (Show, Eq)

data Canvas = Canvas 
  { pixels :: V.Vector Pixel
  , width  :: Int
  , height :: Int
} deriving (Eq)

instance Show Canvas where
    show (Canvas pix w h) = unlines [concatMap show (V.toList (V.slice (i * w) w pix)) | i <- [0 .. h - 1]]

-- Generated by AutoPilot
whiteStar   :: Pixel
whiteStar   = Natural            '*'

redStar     :: Pixel
redStar     = Colored VT.red     '*'

blueStar    :: Pixel
blueStar    = Colored VT.blue    '*'

greenStar   :: Pixel
greenStar   = Colored VT.green   '*'

yellowStar  :: Pixel
yellowStar  = Colored VT.yellow  '*'

magentaStar :: Pixel
magentaStar = Colored VT.magenta '*'

cyanStar    :: Pixel
cyanStar    = Colored VT.cyan    '*'

whiteDot    :: Pixel
whiteDot    = Natural            '⋅'

redDot      :: Pixel
redDot      = Colored VT.red     '⋅'

blueDot     :: Pixel
blueDot     = Colored VT.blue    '⋅'

greenDot    :: Pixel
greenDot    = Colored VT.green   '⋅'

yellowDot   :: Pixel
yellowDot   = Colored VT.yellow  '⋅'

magentaDot  :: Pixel
magentaDot  = Colored VT.magenta '⋅'

cyanDot     :: Pixel
cyanDot     = Colored VT.cyan    '⋅'

redCirc     :: Pixel
redCirc     = Colored VT.red     'o'

blueCirc    :: Pixel
blueCirc    = Colored VT.blue    'o'

greenCirc   :: Pixel
greenCirc   = Colored VT.green   'o'

whiteCirc   :: Pixel
whiteCirc   = Colored VT.white   'o'

yellowCirc  :: Pixel
yellowCirc  = Colored VT.yellow  'o'

magentaCirc :: Pixel
magentaCirc = Colored VT.magenta 'o'

cyanCirc    :: Pixel
cyanCirc    = Colored VT.cyan    'o'

whiteHash   :: Pixel
whiteHash   = Natural            '#'

redHash     :: Pixel
redHash     = Colored VT.red     '#'

blueHash    :: Pixel
blueHash    = Colored VT.blue    '#'

greenHash   :: Pixel
greenHash   = Colored VT.green   '#'

yellowHash  :: Pixel
yellowHash  = Colored VT.yellow  '#'

magentaHash :: Pixel
magentaHash = Colored VT.magenta '#'

cyanHash    :: Pixel
cyanHash    = Colored VT.cyan    '#'
